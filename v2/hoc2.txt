Grammar:

Rule 0     S' -> list
Rule 1     list -> list error NEWLINE
Rule 2     list -> list error
Rule 3     list -> list expr NEWLINE
Rule 4     list -> list expr
Rule 5     list -> empty
Rule 6     expr -> - expr  [precedence=left, level=4]
Rule 7     expr -> ( expr )
Rule 8     expr -> expr % expr  [precedence=left, level=3]
Rule 9     expr -> expr / expr  [precedence=left, level=3]
Rule 10    expr -> expr * expr  [precedence=left, level=3]
Rule 11    expr -> expr - expr  [precedence=left, level=2]
Rule 12    expr -> expr + expr  [precedence=left, level=2]
Rule 13    expr -> VAR = expr  [precedence=right, level=1]
Rule 14    expr -> VAR
Rule 15    expr -> NUMBER
Rule 16    empty -> <empty>

Terminals, with rules where they appear:

%                    : 8
(                    : 7
)                    : 7
*                    : 10
+                    : 12
-                    : 6 11
/                    : 9
=                    : 13
NEWLINE              : 1 3
NUMBER               : 15
VAR                  : 13 14
error                : 1 2

Nonterminals, with rules where they appear:

empty                : 5
expr                 : 3 4 6 7 8 8 9 9 10 10 11 11 12 12 13
list                 : 1 2 3 4 0


state 0

    (0) S' -> . list
    (1) list -> . list error NEWLINE
    (2) list -> . list error
    (3) list -> . list expr NEWLINE
    (4) list -> . list expr
    (5) list -> . empty
    (16) empty -> .
    error           reduce using rule 16 (empty -> .)
    -               reduce using rule 16 (empty -> .)
    (               reduce using rule 16 (empty -> .)
    VAR             reduce using rule 16 (empty -> .)
    NUMBER          reduce using rule 16 (empty -> .)
    $end            reduce using rule 16 (empty -> .)

    list                           shift and go to state 1
    empty                          shift and go to state 2

state 1

    (0) S' -> list .
    (1) list -> list . error NEWLINE
    (2) list -> list . error
    (3) list -> list . expr NEWLINE
    (4) list -> list . expr
    (6) expr -> . - expr
    (7) expr -> . ( expr )
    (8) expr -> . expr % expr
    (9) expr -> . expr / expr
    (10) expr -> . expr * expr
    (11) expr -> . expr - expr
    (12) expr -> . expr + expr
    (13) expr -> . VAR = expr
    (14) expr -> . VAR
    (15) expr -> . NUMBER
    error           shift and go to state 3
    -               shift and go to state 5
    (               shift and go to state 6
    VAR             shift and go to state 7
    NUMBER          shift and go to state 8

    expr                           shift and go to state 4

state 2

    (5) list -> empty .
    error           reduce using rule 5 (list -> empty .)
    -               reduce using rule 5 (list -> empty .)
    (               reduce using rule 5 (list -> empty .)
    VAR             reduce using rule 5 (list -> empty .)
    NUMBER          reduce using rule 5 (list -> empty .)
    $end            reduce using rule 5 (list -> empty .)


state 3

    (1) list -> list error . NEWLINE
    (2) list -> list error .
    NEWLINE         shift and go to state 9
    error           reduce using rule 2 (list -> list error .)
    -               reduce using rule 2 (list -> list error .)
    (               reduce using rule 2 (list -> list error .)
    VAR             reduce using rule 2 (list -> list error .)
    NUMBER          reduce using rule 2 (list -> list error .)
    $end            reduce using rule 2 (list -> list error .)


state 4

    (3) list -> list expr . NEWLINE
    (4) list -> list expr .
    (8) expr -> expr . % expr
    (9) expr -> expr . / expr
    (10) expr -> expr . * expr
    (11) expr -> expr . - expr
    (12) expr -> expr . + expr
  ! shift/reduce conflict for - resolved as shift
    NEWLINE         shift and go to state 10
    error           reduce using rule 4 (list -> list expr .)
    (               reduce using rule 4 (list -> list expr .)
    VAR             reduce using rule 4 (list -> list expr .)
    NUMBER          reduce using rule 4 (list -> list expr .)
    $end            reduce using rule 4 (list -> list expr .)
    %               shift and go to state 11
    /               shift and go to state 12
    *               shift and go to state 13
    -               shift and go to state 14
    +               shift and go to state 15


state 5

    (6) expr -> - . expr
    (6) expr -> . - expr
    (7) expr -> . ( expr )
    (8) expr -> . expr % expr
    (9) expr -> . expr / expr
    (10) expr -> . expr * expr
    (11) expr -> . expr - expr
    (12) expr -> . expr + expr
    (13) expr -> . VAR = expr
    (14) expr -> . VAR
    (15) expr -> . NUMBER
    -               shift and go to state 5
    (               shift and go to state 6
    VAR             shift and go to state 7
    NUMBER          shift and go to state 8

    expr                           shift and go to state 16

state 6

    (7) expr -> ( . expr )
    (6) expr -> . - expr
    (7) expr -> . ( expr )
    (8) expr -> . expr % expr
    (9) expr -> . expr / expr
    (10) expr -> . expr * expr
    (11) expr -> . expr - expr
    (12) expr -> . expr + expr
    (13) expr -> . VAR = expr
    (14) expr -> . VAR
    (15) expr -> . NUMBER
    -               shift and go to state 5
    (               shift and go to state 6
    VAR             shift and go to state 7
    NUMBER          shift and go to state 8

    expr                           shift and go to state 17

state 7

    (13) expr -> VAR . = expr
    (14) expr -> VAR .
    =               shift and go to state 18
    NEWLINE         reduce using rule 14 (expr -> VAR .)
    %               reduce using rule 14 (expr -> VAR .)
    /               reduce using rule 14 (expr -> VAR .)
    *               reduce using rule 14 (expr -> VAR .)
    -               reduce using rule 14 (expr -> VAR .)
    +               reduce using rule 14 (expr -> VAR .)
    error           reduce using rule 14 (expr -> VAR .)
    (               reduce using rule 14 (expr -> VAR .)
    VAR             reduce using rule 14 (expr -> VAR .)
    NUMBER          reduce using rule 14 (expr -> VAR .)
    $end            reduce using rule 14 (expr -> VAR .)
    )               reduce using rule 14 (expr -> VAR .)


state 8

    (15) expr -> NUMBER .
    NEWLINE         reduce using rule 15 (expr -> NUMBER .)
    %               reduce using rule 15 (expr -> NUMBER .)
    /               reduce using rule 15 (expr -> NUMBER .)
    *               reduce using rule 15 (expr -> NUMBER .)
    -               reduce using rule 15 (expr -> NUMBER .)
    +               reduce using rule 15 (expr -> NUMBER .)
    error           reduce using rule 15 (expr -> NUMBER .)
    (               reduce using rule 15 (expr -> NUMBER .)
    VAR             reduce using rule 15 (expr -> NUMBER .)
    NUMBER          reduce using rule 15 (expr -> NUMBER .)
    $end            reduce using rule 15 (expr -> NUMBER .)
    )               reduce using rule 15 (expr -> NUMBER .)


state 9

    (1) list -> list error NEWLINE .
    error           reduce using rule 1 (list -> list error NEWLINE .)
    -               reduce using rule 1 (list -> list error NEWLINE .)
    (               reduce using rule 1 (list -> list error NEWLINE .)
    VAR             reduce using rule 1 (list -> list error NEWLINE .)
    NUMBER          reduce using rule 1 (list -> list error NEWLINE .)
    $end            reduce using rule 1 (list -> list error NEWLINE .)


state 10

    (3) list -> list expr NEWLINE .
    error           reduce using rule 3 (list -> list expr NEWLINE .)
    -               reduce using rule 3 (list -> list expr NEWLINE .)
    (               reduce using rule 3 (list -> list expr NEWLINE .)
    VAR             reduce using rule 3 (list -> list expr NEWLINE .)
    NUMBER          reduce using rule 3 (list -> list expr NEWLINE .)
    $end            reduce using rule 3 (list -> list expr NEWLINE .)


state 11

    (8) expr -> expr % . expr
    (6) expr -> . - expr
    (7) expr -> . ( expr )
    (8) expr -> . expr % expr
    (9) expr -> . expr / expr
    (10) expr -> . expr * expr
    (11) expr -> . expr - expr
    (12) expr -> . expr + expr
    (13) expr -> . VAR = expr
    (14) expr -> . VAR
    (15) expr -> . NUMBER
    -               shift and go to state 5
    (               shift and go to state 6
    VAR             shift and go to state 7
    NUMBER          shift and go to state 8

    expr                           shift and go to state 19

state 12

    (9) expr -> expr / . expr
    (6) expr -> . - expr
    (7) expr -> . ( expr )
    (8) expr -> . expr % expr
    (9) expr -> . expr / expr
    (10) expr -> . expr * expr
    (11) expr -> . expr - expr
    (12) expr -> . expr + expr
    (13) expr -> . VAR = expr
    (14) expr -> . VAR
    (15) expr -> . NUMBER
    -               shift and go to state 5
    (               shift and go to state 6
    VAR             shift and go to state 7
    NUMBER          shift and go to state 8

    expr                           shift and go to state 20

state 13

    (10) expr -> expr * . expr
    (6) expr -> . - expr
    (7) expr -> . ( expr )
    (8) expr -> . expr % expr
    (9) expr -> . expr / expr
    (10) expr -> . expr * expr
    (11) expr -> . expr - expr
    (12) expr -> . expr + expr
    (13) expr -> . VAR = expr
    (14) expr -> . VAR
    (15) expr -> . NUMBER
    -               shift and go to state 5
    (               shift and go to state 6
    VAR             shift and go to state 7
    NUMBER          shift and go to state 8

    expr                           shift and go to state 21

state 14

    (11) expr -> expr - . expr
    (6) expr -> . - expr
    (7) expr -> . ( expr )
    (8) expr -> . expr % expr
    (9) expr -> . expr / expr
    (10) expr -> . expr * expr
    (11) expr -> . expr - expr
    (12) expr -> . expr + expr
    (13) expr -> . VAR = expr
    (14) expr -> . VAR
    (15) expr -> . NUMBER
    -               shift and go to state 5
    (               shift and go to state 6
    VAR             shift and go to state 7
    NUMBER          shift and go to state 8

    expr                           shift and go to state 22

state 15

    (12) expr -> expr + . expr
    (6) expr -> . - expr
    (7) expr -> . ( expr )
    (8) expr -> . expr % expr
    (9) expr -> . expr / expr
    (10) expr -> . expr * expr
    (11) expr -> . expr - expr
    (12) expr -> . expr + expr
    (13) expr -> . VAR = expr
    (14) expr -> . VAR
    (15) expr -> . NUMBER
    -               shift and go to state 5
    (               shift and go to state 6
    VAR             shift and go to state 7
    NUMBER          shift and go to state 8

    expr                           shift and go to state 23

state 16

    (6) expr -> - expr .
    (8) expr -> expr . % expr
    (9) expr -> expr . / expr
    (10) expr -> expr . * expr
    (11) expr -> expr . - expr
    (12) expr -> expr . + expr
    NEWLINE         reduce using rule 6 (expr -> - expr .)
    %               reduce using rule 6 (expr -> - expr .)
    /               reduce using rule 6 (expr -> - expr .)
    *               reduce using rule 6 (expr -> - expr .)
    -               reduce using rule 6 (expr -> - expr .)
    +               reduce using rule 6 (expr -> - expr .)
    error           reduce using rule 6 (expr -> - expr .)
    (               reduce using rule 6 (expr -> - expr .)
    VAR             reduce using rule 6 (expr -> - expr .)
    NUMBER          reduce using rule 6 (expr -> - expr .)
    $end            reduce using rule 6 (expr -> - expr .)
    )               reduce using rule 6 (expr -> - expr .)


state 17

    (7) expr -> ( expr . )
    (8) expr -> expr . % expr
    (9) expr -> expr . / expr
    (10) expr -> expr . * expr
    (11) expr -> expr . - expr
    (12) expr -> expr . + expr
    )               shift and go to state 24
    %               shift and go to state 11
    /               shift and go to state 12
    *               shift and go to state 13
    -               shift and go to state 14
    +               shift and go to state 15


state 18

    (13) expr -> VAR = . expr
    (6) expr -> . - expr
    (7) expr -> . ( expr )
    (8) expr -> . expr % expr
    (9) expr -> . expr / expr
    (10) expr -> . expr * expr
    (11) expr -> . expr - expr
    (12) expr -> . expr + expr
    (13) expr -> . VAR = expr
    (14) expr -> . VAR
    (15) expr -> . NUMBER
    -               shift and go to state 5
    (               shift and go to state 6
    VAR             shift and go to state 7
    NUMBER          shift and go to state 8

    expr                           shift and go to state 25

state 19

    (8) expr -> expr % expr .
    (8) expr -> expr . % expr
    (9) expr -> expr . / expr
    (10) expr -> expr . * expr
    (11) expr -> expr . - expr
    (12) expr -> expr . + expr
    NEWLINE         reduce using rule 8 (expr -> expr % expr .)
    %               reduce using rule 8 (expr -> expr % expr .)
    /               reduce using rule 8 (expr -> expr % expr .)
    *               reduce using rule 8 (expr -> expr % expr .)
    -               reduce using rule 8 (expr -> expr % expr .)
    +               reduce using rule 8 (expr -> expr % expr .)
    error           reduce using rule 8 (expr -> expr % expr .)
    (               reduce using rule 8 (expr -> expr % expr .)
    VAR             reduce using rule 8 (expr -> expr % expr .)
    NUMBER          reduce using rule 8 (expr -> expr % expr .)
    $end            reduce using rule 8 (expr -> expr % expr .)
    )               reduce using rule 8 (expr -> expr % expr .)


state 20

    (9) expr -> expr / expr .
    (8) expr -> expr . % expr
    (9) expr -> expr . / expr
    (10) expr -> expr . * expr
    (11) expr -> expr . - expr
    (12) expr -> expr . + expr
    NEWLINE         reduce using rule 9 (expr -> expr / expr .)
    %               reduce using rule 9 (expr -> expr / expr .)
    /               reduce using rule 9 (expr -> expr / expr .)
    *               reduce using rule 9 (expr -> expr / expr .)
    -               reduce using rule 9 (expr -> expr / expr .)
    +               reduce using rule 9 (expr -> expr / expr .)
    error           reduce using rule 9 (expr -> expr / expr .)
    (               reduce using rule 9 (expr -> expr / expr .)
    VAR             reduce using rule 9 (expr -> expr / expr .)
    NUMBER          reduce using rule 9 (expr -> expr / expr .)
    $end            reduce using rule 9 (expr -> expr / expr .)
    )               reduce using rule 9 (expr -> expr / expr .)


state 21

    (10) expr -> expr * expr .
    (8) expr -> expr . % expr
    (9) expr -> expr . / expr
    (10) expr -> expr . * expr
    (11) expr -> expr . - expr
    (12) expr -> expr . + expr
    NEWLINE         reduce using rule 10 (expr -> expr * expr .)
    %               reduce using rule 10 (expr -> expr * expr .)
    /               reduce using rule 10 (expr -> expr * expr .)
    *               reduce using rule 10 (expr -> expr * expr .)
    -               reduce using rule 10 (expr -> expr * expr .)
    +               reduce using rule 10 (expr -> expr * expr .)
    error           reduce using rule 10 (expr -> expr * expr .)
    (               reduce using rule 10 (expr -> expr * expr .)
    VAR             reduce using rule 10 (expr -> expr * expr .)
    NUMBER          reduce using rule 10 (expr -> expr * expr .)
    $end            reduce using rule 10 (expr -> expr * expr .)
    )               reduce using rule 10 (expr -> expr * expr .)


state 22

    (11) expr -> expr - expr .
    (8) expr -> expr . % expr
    (9) expr -> expr . / expr
    (10) expr -> expr . * expr
    (11) expr -> expr . - expr
    (12) expr -> expr . + expr
    NEWLINE         reduce using rule 11 (expr -> expr - expr .)
    -               reduce using rule 11 (expr -> expr - expr .)
    +               reduce using rule 11 (expr -> expr - expr .)
    error           reduce using rule 11 (expr -> expr - expr .)
    (               reduce using rule 11 (expr -> expr - expr .)
    VAR             reduce using rule 11 (expr -> expr - expr .)
    NUMBER          reduce using rule 11 (expr -> expr - expr .)
    $end            reduce using rule 11 (expr -> expr - expr .)
    )               reduce using rule 11 (expr -> expr - expr .)
    %               shift and go to state 11
    /               shift and go to state 12
    *               shift and go to state 13


state 23

    (12) expr -> expr + expr .
    (8) expr -> expr . % expr
    (9) expr -> expr . / expr
    (10) expr -> expr . * expr
    (11) expr -> expr . - expr
    (12) expr -> expr . + expr
    NEWLINE         reduce using rule 12 (expr -> expr + expr .)
    -               reduce using rule 12 (expr -> expr + expr .)
    +               reduce using rule 12 (expr -> expr + expr .)
    error           reduce using rule 12 (expr -> expr + expr .)
    (               reduce using rule 12 (expr -> expr + expr .)
    VAR             reduce using rule 12 (expr -> expr + expr .)
    NUMBER          reduce using rule 12 (expr -> expr + expr .)
    $end            reduce using rule 12 (expr -> expr + expr .)
    )               reduce using rule 12 (expr -> expr + expr .)
    %               shift and go to state 11
    /               shift and go to state 12
    *               shift and go to state 13


state 24

    (7) expr -> ( expr ) .
    NEWLINE         reduce using rule 7 (expr -> ( expr ) .)
    %               reduce using rule 7 (expr -> ( expr ) .)
    /               reduce using rule 7 (expr -> ( expr ) .)
    *               reduce using rule 7 (expr -> ( expr ) .)
    -               reduce using rule 7 (expr -> ( expr ) .)
    +               reduce using rule 7 (expr -> ( expr ) .)
    error           reduce using rule 7 (expr -> ( expr ) .)
    (               reduce using rule 7 (expr -> ( expr ) .)
    VAR             reduce using rule 7 (expr -> ( expr ) .)
    NUMBER          reduce using rule 7 (expr -> ( expr ) .)
    $end            reduce using rule 7 (expr -> ( expr ) .)
    )               reduce using rule 7 (expr -> ( expr ) .)


state 25

    (13) expr -> VAR = expr .
    (8) expr -> expr . % expr
    (9) expr -> expr . / expr
    (10) expr -> expr . * expr
    (11) expr -> expr . - expr
    (12) expr -> expr . + expr
    NEWLINE         reduce using rule 13 (expr -> VAR = expr .)
    error           reduce using rule 13 (expr -> VAR = expr .)
    (               reduce using rule 13 (expr -> VAR = expr .)
    VAR             reduce using rule 13 (expr -> VAR = expr .)
    NUMBER          reduce using rule 13 (expr -> VAR = expr .)
    $end            reduce using rule 13 (expr -> VAR = expr .)
    )               reduce using rule 13 (expr -> VAR = expr .)
    %               shift and go to state 11
    /               shift and go to state 12
    *               shift and go to state 13
    -               shift and go to state 14
    +               shift and go to state 15


Conflicts:

shift/reduce conflict for - in state 4 resolved as shift